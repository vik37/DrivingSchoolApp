// <auto-generated />
using System;
using DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.Migrations
{
    [DbContext(typeof(CategoryCDbContext))]
    partial class CategoryCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("City");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("CategoryC");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul. ASNOM 12/A",
                            City = "Skopje",
                            Phone = "+389 01 222 110"
                        },
                        new
                        {
                            Id = 2,
                            Address = "bul. JNA 120",
                            City = "Stip",
                            Phone = "+389 01 554 2290"
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryLesson", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryCId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("LessonId", "CategoryCId");

                    b.HasIndex("CategoryCId");

                    b.ToTable("CategoryLesson");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            CategoryCId = 1,
                            Id = 1
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryCId = 1,
                            Id = 2
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryCId = 1,
                            Id = 3
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryCId = 2,
                            Id = 4
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryCId = 2,
                            Id = 5
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryCId = 2,
                            Id = 6
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnName("Age");

                    b.Property<int>("CategoryCId")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Firstname");

                    b.Property<string>("InstructorAcademy")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("InstructorAcademy");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("Lastname");

                    b.Property<string>("LicenceId")
                        .IsRequired()
                        .HasMaxLength(1150)
                        .HasColumnType("nvarchar(1150)")
                        .HasColumnName("LicenceId");

                    b.Property<string>("Photo")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("Photo");

                    b.Property<string>("StartedDay")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("StartedDay");

                    b.Property<short>("TotalDriveExperience")
                        .HasColumnType("smallint")
                        .HasColumnName("DriveExperience");

                    b.Property<short>("TotalWorkExperience")
                        .HasColumnType("smallint")
                        .HasColumnName("TotalWorkExperience");

                    b.Property<short>("TruckDriveExperience")
                        .HasColumnType("smallint")
                        .HasColumnName("TruckDriveExperience");

                    b.Property<bool>("isBooked")
                        .HasColumnType("bit")
                        .HasColumnName("isBooked");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCId");

                    b.ToTable("Instructor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = (short)40,
                            CategoryCId = 1,
                            Firstname = "Sasko",
                            InstructorAcademy = "AMSM",
                            Lastname = "Savevski",
                            LicenceId = "bdb105d4-7680-48be-95bc-ae08e8f98d69",
                            StartedDay = "05/26/2018",
                            TotalDriveExperience = (short)21,
                            TotalWorkExperience = (short)10,
                            TruckDriveExperience = (short)10,
                            isBooked = false
                        },
                        new
                        {
                            Id = 2,
                            Age = (short)44,
                            CategoryCId = 1,
                            Firstname = "Krste",
                            InstructorAcademy = "AMSM",
                            Lastname = "Panvov",
                            LicenceId = "766b3746-3388-424b-a8bb-51361ad92968",
                            StartedDay = "04/19/2017",
                            TotalDriveExperience = (short)22,
                            TotalWorkExperience = (short)16,
                            TruckDriveExperience = (short)17,
                            isBooked = false
                        },
                        new
                        {
                            Id = 3,
                            Age = (short)47,
                            CategoryCId = 2,
                            Firstname = "Tasko",
                            InstructorAcademy = "AMSM",
                            Lastname = "Karanfilovski",
                            LicenceId = "73b9547e-c1bb-4dff-b420-428756f5da01",
                            StartedDay = "11/07/2018",
                            TotalDriveExperience = (short)24,
                            TotalWorkExperience = (short)16,
                            TruckDriveExperience = (short)17,
                            isBooked = false
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.InstructorCategoryLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("CategoryType")
                        .HasColumnType("tinyint")
                        .HasColumnName("CategoryType");

                    b.Property<int>("ÌnstructorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ÌnstructorId");

                    b.ToTable("InstructorCategoryLicence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryType = (byte)1,
                            ÌnstructorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryType = (byte)2,
                            ÌnstructorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryType = (byte)0,
                            ÌnstructorId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryType = (byte)1,
                            ÌnstructorId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryType = (byte)2,
                            ÌnstructorId = 2
                        },
                        new
                        {
                            Id = 6,
                            CategoryType = (byte)3,
                            ÌnstructorId = 2
                        },
                        new
                        {
                            Id = 7,
                            CategoryType = (byte)1,
                            ÌnstructorId = 3
                        },
                        new
                        {
                            Id = 8,
                            CategoryType = (byte)2,
                            ÌnstructorId = 3
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Description");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("Discount");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<string>("LicenceDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("LicenceDescription");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Price");

                    b.Property<decimal>("TestPrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("TestPrice");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type");

                    b.Property<decimal?>("VirtualPracticePrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("VirtualPracticePrice");

                    b.HasKey("Id");

                    b.ToTable("Lesson");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "First and foremost, before practical driving has theoretical knowledge. That's why we offer 30 hours of classroom theory with excellent instructors. The price is $89.95 including 3 possible tests. If you don't pass these 3 tests, you will be charged $15 each. If you have knowledge of theory or have passed theory, you can take tests directly. An ID card or passport is required, you must be over 21 years old, medical certificate for \"C\" category. It's also mandatory to have previously taken \"B\" category.",
                            Duration = 40,
                            Price = 89.95m,
                            TestPrice = 15m,
                            Type = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            Description = "You can continue with driving lessons on Polygon if you have successfully passed or previously passed the theory test. The price is $141.55$, you get 60 practical lessons at the polygon with a highly qualified and experienced instructor that you choose yourself. Also truck of your choice. The price includes the right to take the test 3 times, and then it is $25 each. If you want, you can use a virtual 3D drive-car simulator way of training just for 24.5. Currently, Only in Skopje and Shtip we have the opportunity for C category training.",
                            Discount = (short)15,
                            Duration = 60,
                            Price = 141.55m,
                            TestPrice = 25m,
                            Type = (byte)1,
                            VirtualPracticePrice = 24.5m
                        },
                        new
                        {
                            Id = 3,
                            Description = "The last classes before the opportunity to apply for a license are city driving classes and the test. The price is $170.00, you get 70 practical lessons with a highly qualified and experienced instructor that you choose yourself. Also truck of your choice. The price includes the right to take the test 3 times, and then it is $35 each.",
                            Discount = (short)20,
                            Duration = 70,
                            LicenceDescription = "Drivers of this category of vehicles tend to do more local deliveries than large vehicles.  A category C license allows drivers to drive vehicles over 3.5 tonnes, but must not exceed 32 tonnes. Category C (or Class 2 as they are otherwise known) licences typically cover a vehicle with a cab and trailer fixed permanently together. In other words, what we would consider a ‘standard lorry’ or a rigid vehicle.",
                            Price = 170m,
                            TestPrice = 35m,
                            Type = (byte)2
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("AvailableTruck")
                        .HasColumnType("tinyint")
                        .HasColumnName("AvailableTruck");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Color");

                    b.Property<int>("CylinderCapacity")
                        .HasColumnType("int")
                        .HasColumnName("CylinderCapacity");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Fuel");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Model");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("Photo");

                    b.Property<short>("Power")
                        .HasColumnType("smallint")
                        .HasColumnName("Power");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(650)
                        .HasColumnType("nvarchar(650)")
                        .HasColumnName("Transmission");

                    b.Property<int>("TruckNumber")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Type");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("Truck");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableTruck = (byte)7,
                            Color = "White",
                            CylinderCapacity = 4249,
                            Fuel = "Diesel",
                            Model = "Mercedes-Benz",
                            Photo = "mercedes-benz",
                            Power = (short)180,
                            Transmission = "Manual Gearbox - 6",
                            TruckNumber = 7011,
                            Type = "Atego 818",
                            Year = 2007
                        },
                        new
                        {
                            Id = 2,
                            AvailableTruck = (byte)4,
                            Color = "Metallic",
                            CylinderCapacity = 12777,
                            Fuel = "Diesel",
                            Model = "Volvo",
                            Photo = "volvo-hp",
                            Power = (short)600,
                            Transmission = "Splitter and Range with automated gearchanging - 12 speed",
                            TruckNumber = 53112,
                            Type = "FH",
                            Year = 2011
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.TruckPerCity", b =>
                {
                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryCId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("TruckId", "CategoryCId");

                    b.HasIndex("CategoryCId");

                    b.ToTable("TruckPerCity");

                    b.HasData(
                        new
                        {
                            TruckId = 1,
                            CategoryCId = 1,
                            Id = 1
                        },
                        new
                        {
                            TruckId = 2,
                            CategoryCId = 1,
                            Id = 2
                        },
                        new
                        {
                            TruckId = 1,
                            CategoryCId = 2,
                            Id = 3
                        },
                        new
                        {
                            TruckId = 2,
                            CategoryCId = 2,
                            Id = 4
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("Company");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasColumnName("Experience");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<byte>("TypeOfWorkExperience")
                        .HasColumnType("tinyint")
                        .HasColumnName("TypeOfWorkExperience");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("WorkExperience");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Voznja Kumanovo",
                            Experience = 2,
                            InstructorId = 3,
                            TypeOfWorkExperience = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            Company = "Scania Skopje",
                            Experience = 4,
                            InstructorId = 1,
                            TypeOfWorkExperience = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            Company = "Vardar Express Negotino",
                            Experience = 7,
                            InstructorId = 2,
                            TypeOfWorkExperience = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            Company = "Polog Tetovo",
                            Experience = 4,
                            InstructorId = 2,
                            TypeOfWorkExperience = (byte)0
                        },
                        new
                        {
                            Id = 5,
                            Company = "Vardar Express Negotino",
                            Experience = 2,
                            InstructorId = 3,
                            TypeOfWorkExperience = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            Company = "Polog Tetovo",
                            Experience = 5,
                            InstructorId = 3,
                            TypeOfWorkExperience = (byte)1
                        },
                        new
                        {
                            Id = 7,
                            Company = "AAK Drive School Stip",
                            Experience = 5,
                            InstructorId = 3,
                            TypeOfWorkExperience = (byte)0
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryLesson", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryC", "CategoryC")
                        .WithMany("Lessons")
                        .HasForeignKey("CategoryCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Lesson", "Lessons")
                        .WithMany("CategoryLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryC");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Instructor", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryC", "CategoryC")
                        .WithMany("Instructors")
                        .HasForeignKey("CategoryCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryC");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.InstructorCategoryLicence", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Instructor", "Instructor")
                        .WithMany("CategoryLicences")
                        .HasForeignKey("ÌnstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.TruckPerCity", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryC", "CategoryC")
                        .WithMany("TruckPerCities")
                        .HasForeignKey("CategoryCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Truck", "Truck")
                        .WithMany("TruckPerCities")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryC");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.WorkExperience", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Instructor", "Instructor")
                        .WithMany("WorkExperience")
                        .HasForeignKey("InstructorId");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.CategoryC", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Lessons");

                    b.Navigation("TruckPerCities");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Instructor", b =>
                {
                    b.Navigation("CategoryLicences");

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Lesson", b =>
                {
                    b.Navigation("CategoryLessons");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.CCategoryAPI.DataAccess.Entities.Truck", b =>
                {
                    b.Navigation("TruckPerCities");
                });
#pragma warning restore 612, 618
        }
    }
}
