// <auto-generated />
using System;
using DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.Migrations
{
    [DbContext(typeof(CategoryBDbContext))]
    partial class CategoryBDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("AvailableCars")
                        .HasColumnType("tinyint")
                        .HasColumnName("AvailableCars");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Color");

                    b.Property<byte>("Doors")
                        .HasColumnType("tinyint")
                        .HasColumnName("Doors");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Fuel");

                    b.Property<decimal>("FuelConsuption")
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)")
                        .HasColumnName("FuelConsuption");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasColumnName("Length");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Model");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("Photo");

                    b.Property<short>("Power")
                        .HasColumnType("smallint")
                        .HasColumnName("Power");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("Speed");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("Transmission");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Type");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableCars = (byte)4,
                            Color = "Red",
                            Doors = (byte)5,
                            Fuel = "Petrol",
                            FuelConsuption = 4.1m,
                            Length = 4060,
                            Model = "Corsa",
                            Photo = "vauxhall-corsa",
                            Power = (short)75,
                            Speed = 174,
                            Transmission = "Manual, 5 Speed",
                            Type = "Vauxhall",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            AvailableCars = (byte)5,
                            Color = "Red",
                            Doors = (byte)3,
                            Fuel = "Diesel",
                            FuelConsuption = 5.5m,
                            Length = 3435,
                            Model = "C1",
                            Photo = "citroen_C1",
                            Power = (short)68,
                            Speed = 158,
                            Transmission = "Manual, 5 Speed",
                            Type = "Citroen",
                            Year = 2010
                        },
                        new
                        {
                            Id = 3,
                            AvailableCars = (byte)3,
                            Color = "Blue",
                            Doors = (byte)5,
                            Fuel = "Petrol",
                            FuelConsuption = 4.5m,
                            Length = 4186,
                            Model = "Puma",
                            Photo = "ford-puma",
                            Power = (short)125,
                            Speed = 200,
                            Transmission = "Manual, 6 Speed",
                            Type = "Ford",
                            Year = 2019
                        },
                        new
                        {
                            Id = 4,
                            AvailableCars = (byte)6,
                            Color = "Red",
                            Doors = (byte)3,
                            Fuel = "Petrol",
                            FuelConsuption = 4.8m,
                            Length = 4063,
                            Model = "Clio",
                            Photo = "renault-clio",
                            Power = (short)75,
                            Speed = 167,
                            Transmission = "Manual, 5 Speed",
                            Type = "Renault",
                            Year = 2016
                        },
                        new
                        {
                            Id = 5,
                            AvailableCars = (byte)7,
                            Color = "Yellow",
                            Doors = (byte)5,
                            Fuel = "Diesel",
                            FuelConsuption = 6.5m,
                            Length = 4199,
                            Model = "Golf 5",
                            Photo = "VW-Golf",
                            Power = (short)85,
                            Speed = 250,
                            Transmission = "6 Speed Automatic with Manual mode",
                            Type = "Volkswagen",
                            Year = 2010
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CarPerCity", b =>
                {
                    b.Property<int>("CategoryBId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("CategoryBId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("CarPerCity");

                    b.HasData(
                        new
                        {
                            CategoryBId = 1,
                            CarId = 1,
                            Id = 1
                        },
                        new
                        {
                            CategoryBId = 1,
                            CarId = 2,
                            Id = 2
                        },
                        new
                        {
                            CategoryBId = 1,
                            CarId = 3,
                            Id = 3
                        },
                        new
                        {
                            CategoryBId = 1,
                            CarId = 4,
                            Id = 4
                        },
                        new
                        {
                            CategoryBId = 1,
                            CarId = 5,
                            Id = 5
                        },
                        new
                        {
                            CategoryBId = 2,
                            CarId = 1,
                            Id = 6
                        },
                        new
                        {
                            CategoryBId = 2,
                            CarId = 2,
                            Id = 7
                        },
                        new
                        {
                            CategoryBId = 2,
                            CarId = 3,
                            Id = 8
                        },
                        new
                        {
                            CategoryBId = 2,
                            CarId = 4,
                            Id = 9
                        },
                        new
                        {
                            CategoryBId = 2,
                            CarId = 5,
                            Id = 10
                        },
                        new
                        {
                            CategoryBId = 3,
                            CarId = 2,
                            Id = 11
                        },
                        new
                        {
                            CategoryBId = 3,
                            CarId = 4,
                            Id = 12
                        },
                        new
                        {
                            CategoryBId = 3,
                            CarId = 5,
                            Id = 13
                        },
                        new
                        {
                            CategoryBId = 4,
                            CarId = 1,
                            Id = 14
                        },
                        new
                        {
                            CategoryBId = 4,
                            CarId = 2,
                            Id = 15
                        },
                        new
                        {
                            CategoryBId = 4,
                            CarId = 4,
                            Id = 16
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("City");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("CategoryB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul. ASNOM 12/A",
                            City = "Skopje",
                            Phone = "+389 01 222 110"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ul. Mirche Acev",
                            City = "Bitola",
                            Phone = "+389 21 334 667"
                        },
                        new
                        {
                            Id = 3,
                            Address = "bul. JNA 120",
                            City = "Stip",
                            Phone = "+389 01 554 2290"
                        },
                        new
                        {
                            Id = 4,
                            Address = "ul. Marko Nestoroski 22",
                            City = "Ohrid",
                            Phone = "+389 23 904 106"
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryLesson", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryBId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("LessonId", "CategoryBId");

                    b.HasIndex("CategoryBId");

                    b.ToTable("CategoryLesson");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            CategoryBId = 1,
                            Id = 1
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryBId = 1,
                            Id = 2
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryBId = 1,
                            Id = 3
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryBId = 2,
                            Id = 4
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryBId = 2,
                            Id = 5
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryBId = 2,
                            Id = 6
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryBId = 3,
                            Id = 7
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryBId = 3,
                            Id = 8
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryBId = 3,
                            Id = 9
                        },
                        new
                        {
                            LessonId = 1,
                            CategoryBId = 4,
                            Id = 10
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryBId = 4,
                            Id = 11
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryBId = 4,
                            Id = 12
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnName("Age");

                    b.Property<int>("CategoryBId")
                        .HasColumnType("int");

                    b.Property<int>("DriveExperience")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Firstname");

                    b.Property<string>("InstructorAcademy")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("InstructorAcademy");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("Lastname");

                    b.Property<string>("LicenceId")
                        .IsRequired()
                        .HasMaxLength(1150)
                        .HasColumnType("nvarchar(1150)")
                        .HasColumnName("LicenceId");

                    b.Property<string>("Photo")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("Photo");

                    b.Property<string>("StartedDay")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("StartedDay");

                    b.Property<int>("TotalWorkExperience")
                        .HasColumnType("int");

                    b.Property<bool>("isBooked")
                        .HasColumnType("bit")
                        .HasColumnName("isBooked");

                    b.HasKey("Id");

                    b.HasIndex("CategoryBId");

                    b.ToTable("Instructor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = (short)41,
                            CategoryBId = 1,
                            DriveExperience = 21,
                            Firstname = "Davor",
                            InstructorAcademy = "AMSMS",
                            Lastname = "Shurjak",
                            LicenceId = "c49f5ef9-12b0-43d5-b642-0c6a41e9ca4b",
                            StartedDay = "04/19/2009",
                            TotalWorkExperience = 14,
                            isBooked = false
                        },
                        new
                        {
                            Id = 2,
                            Age = (short)37,
                            CategoryBId = 1,
                            DriveExperience = 18,
                            Firstname = "Tatjana",
                            InstructorAcademy = "AMSMS",
                            Lastname = "Crvenkovska",
                            LicenceId = "df0b96c7-0016-44c2-b75e-770ab9d43c4c",
                            StartedDay = "10/31/2015",
                            TotalWorkExperience = 7,
                            isBooked = false
                        },
                        new
                        {
                            Id = 3,
                            Age = (short)52,
                            CategoryBId = 1,
                            DriveExperience = 34,
                            Firstname = "Toni",
                            InstructorAcademy = "InstructorsMKD Company",
                            Lastname = "Zajkov",
                            LicenceId = "962e96d6-5017-4bef-bd32-7ae1af381c42",
                            StartedDay = "07/01/1997",
                            TotalWorkExperience = 25,
                            isBooked = true
                        },
                        new
                        {
                            Id = 4,
                            Age = (short)37,
                            CategoryBId = 1,
                            DriveExperience = 9,
                            Firstname = "Sasa",
                            InstructorAcademy = "AMSMS",
                            Lastname = "Ciric",
                            LicenceId = "96963be0-3157-4e29-ae95-333969bdce05",
                            StartedDay = "07/17/2017",
                            TotalWorkExperience = 5,
                            isBooked = true
                        },
                        new
                        {
                            Id = 5,
                            Age = (short)31,
                            CategoryBId = 1,
                            DriveExperience = 8,
                            Firstname = "Metodija",
                            InstructorAcademy = "InstructorsMKD Company",
                            Lastname = "Spasovski",
                            LicenceId = "3f362685-b8b0-4fa3-aa96-1b1c700e4d31",
                            StartedDay = "29/01/2021",
                            TotalWorkExperience = 5,
                            isBooked = false
                        },
                        new
                        {
                            Id = 6,
                            Age = (short)41,
                            CategoryBId = 2,
                            DriveExperience = 18,
                            Firstname = "Filip",
                            InstructorAcademy = "Oslomej Kicevo",
                            Lastname = "Ristoski",
                            LicenceId = "083d6982-6234-4553-934f-e75f2b58b921",
                            StartedDay = "29/01/2019",
                            TotalWorkExperience = 15,
                            isBooked = false
                        },
                        new
                        {
                            Id = 7,
                            Age = (short)58,
                            CategoryBId = 2,
                            DriveExperience = 40,
                            Firstname = "Maida",
                            InstructorAcademy = "AMSM",
                            Lastname = "Musandra",
                            LicenceId = "1985be12-6bf4-4063-bf23-56498d029225",
                            StartedDay = "12/08/2006",
                            TotalWorkExperience = 34,
                            isBooked = false
                        },
                        new
                        {
                            Id = 8,
                            Age = (short)51,
                            CategoryBId = 2,
                            DriveExperience = 30,
                            Firstname = "Kristina",
                            InstructorAcademy = "AMSM",
                            Lastname = "Neagu",
                            LicenceId = "51a01164-2e9b-423e-bb57-c4286695caf0",
                            StartedDay = "26/05/2012",
                            TotalWorkExperience = 29,
                            isBooked = false
                        },
                        new
                        {
                            Id = 9,
                            Age = (short)29,
                            CategoryBId = 2,
                            DriveExperience = 11,
                            Firstname = "Marko",
                            InstructorAcademy = "AMSM",
                            Lastname = "Mojsov",
                            LicenceId = "9d613151-ac1a-4bb5-a9cb-a34de1c55153",
                            StartedDay = "02/02/2017",
                            TotalWorkExperience = 5,
                            isBooked = false
                        },
                        new
                        {
                            Id = 10,
                            Age = (short)41,
                            CategoryBId = 3,
                            DriveExperience = 20,
                            Firstname = "Cedo",
                            InstructorAcademy = "AS Vardar",
                            Lastname = "Janevski",
                            LicenceId = "b1952570-ecd5-4f14-9cce-4968a2d7c296",
                            StartedDay = "02/02/2017",
                            TotalWorkExperience = 16,
                            isBooked = false
                        },
                        new
                        {
                            Id = 11,
                            Age = (short)37,
                            CategoryBId = 3,
                            DriveExperience = 18,
                            Firstname = "Pere",
                            InstructorAcademy = "ASMS",
                            Lastname = "Tosev",
                            LicenceId = "9a05d276-9516-4349-be19-3c7dfa79fa81",
                            StartedDay = "03/19/2019",
                            TotalWorkExperience = 8,
                            isBooked = false
                        },
                        new
                        {
                            Id = 12,
                            Age = (short)28,
                            CategoryBId = 4,
                            DriveExperience = 10,
                            Firstname = "Petar",
                            InstructorAcademy = "ASMS",
                            Lastname = "Milosevski",
                            LicenceId = "748cf5dd-67f6-4fae-a816-9d8aa067019d",
                            StartedDay = "03/19/2018",
                            TotalWorkExperience = 4,
                            isBooked = false
                        },
                        new
                        {
                            Id = 13,
                            Age = (short)35,
                            CategoryBId = 4,
                            DriveExperience = 10,
                            Firstname = "Sabri",
                            InstructorAcademy = "AS Vardar",
                            Lastname = "Asan",
                            LicenceId = "9d297b8a-0f70-43bd-ba7c-154a2ea54f53",
                            StartedDay = "03/19/2020",
                            TotalWorkExperience = 5,
                            isBooked = false
                        },
                        new
                        {
                            Id = 14,
                            Age = (short)32,
                            CategoryBId = 4,
                            DriveExperience = 14,
                            Firstname = "Klimentina",
                            InstructorAcademy = "Biljanini Izvori",
                            Lastname = "Rasko",
                            LicenceId = "c2c5c12c-b37e-4fa5-9552-c1c48a7a8e86",
                            StartedDay = "03/19/2014",
                            TotalWorkExperience = 9,
                            isBooked = false
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Description");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("Discount");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<string>("LicenceDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("LicenceDescription");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Price");

                    b.Property<decimal>("TestPrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("TestPrice");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type");

                    b.Property<decimal?>("VirtualPracticePrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("VirtualPracticePrice");

                    b.HasKey("Id");

                    b.ToTable("Lesson");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "First and foremost, before practical driving has theoretical knowledge. That's why we offer 30 hours of classroom theory with excellent instructors. The price is $65.45 including 2 possible tests. If you don't pass these 2 tests, you will be charged $10 each. If you have knowledge of theory or have passed theory, you can take tests directly. An ID card or passport is required, you must be over 18 years old, medical certificate for \"B\" category.",
                            Duration = 30,
                            Price = 65.45m,
                            TestPrice = 10m,
                            Type = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            Description = "You can continue with driving lessons on Polygon if you have successfully passed or previously passed the theory test. The price is $127.95, you get 50 practical lessons at the polygon with a highly qualified and experienced instructor that you choose yourself. Also car of your choice. The price includes the right to take the test 3 times, and then it is $20 each. If you want, you can use a virtual 3D drive-car simulator way of training just for 24.5",
                            Discount = (short)15,
                            Duration = 50,
                            Price = 127.95m,
                            TestPrice = 20m,
                            Type = (byte)1,
                            VirtualPracticePrice = 24.5m
                        },
                        new
                        {
                            Id = 3,
                            Description = "The last classes before the opportunity to apply for a license are city driving classes and the test. The price is $159.95, you get 60 practical lessons with a highly qualified and experienced instructor that you choose yourself. Also car of your choice. The price includes the right to take the test 3 times, and then it is $15 each.",
                            Discount = (short)20,
                            Duration = 60,
                            LicenceDescription = "B category - vehicles with a maximum mass not exceeding 3500 kg and seats, excluding the driver's seat, not exceeding 8 seats. The driving license of the categories can be obtained reaching the age of 18. Necessary conditions are to complete a training at driving school and passing the theoretical and driving tests.",
                            Price = 159.95m,
                            TestPrice = 25m,
                            Type = (byte)2
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("Company");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasColumnName("Experience");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("WorkExperience");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Skopje Drive School",
                            Experience = 1,
                            InstructorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Company = "Skorpion Skopje",
                            Experience = 4,
                            InstructorId = 5
                        },
                        new
                        {
                            Id = 3,
                            Company = "IKO Kumanovo",
                            Experience = 3,
                            InstructorId = 6
                        },
                        new
                        {
                            Id = 4,
                            Company = "Auto Akademik Skopje",
                            Experience = 9,
                            InstructorId = 6
                        },
                        new
                        {
                            Id = 5,
                            Company = "Skoda Drive Kavadarci",
                            Experience = 4,
                            InstructorId = 7
                        },
                        new
                        {
                            Id = 6,
                            Company = "Tikvesh Kavadarci",
                            Experience = 8,
                            InstructorId = 7
                        },
                        new
                        {
                            Id = 7,
                            Company = "AMSM",
                            Experience = 12,
                            InstructorId = 7
                        },
                        new
                        {
                            Id = 8,
                            Company = "Skorpion Skopje",
                            Experience = 1,
                            InstructorId = 8
                        },
                        new
                        {
                            Id = 9,
                            Company = "Labud Struga",
                            Experience = 5,
                            InstructorId = 8
                        },
                        new
                        {
                            Id = 10,
                            Company = "Krap Dojran",
                            Experience = 2,
                            InstructorId = 8
                        },
                        new
                        {
                            Id = 11,
                            Company = "Roza Skopje",
                            Experience = 9,
                            InstructorId = 8
                        },
                        new
                        {
                            Id = 12,
                            Company = "Roza Skopje",
                            Experience = 2,
                            InstructorId = 10
                        },
                        new
                        {
                            Id = 13,
                            Company = "Roza Skopje",
                            Experience = 9,
                            InstructorId = 10
                        },
                        new
                        {
                            Id = 14,
                            Company = "Auto Zelka Skopje",
                            Experience = 5,
                            InstructorId = 11
                        },
                        new
                        {
                            Id = 15,
                            Company = "Drim Debar",
                            Experience = 1,
                            InstructorId = 13
                        },
                        new
                        {
                            Id = 16,
                            Company = "Tikvesh Kavadarci",
                            Experience = 2,
                            InstructorId = 13
                        },
                        new
                        {
                            Id = 17,
                            Company = "Kajce Ohrid",
                            Experience = 1,
                            InstructorId = 14
                        });
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CarPerCity", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Car", "Car")
                        .WithMany("CarsPerCity")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryB", "CategoryB")
                        .WithMany("CarPerCity")
                        .HasForeignKey("CategoryBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CategoryB");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryLesson", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryB", "CategoryB")
                        .WithMany("CategoryLessons")
                        .HasForeignKey("CategoryBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Lesson", "Lessons")
                        .WithMany("CategoryLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryB");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Instructor", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryB", "CategoryB")
                        .WithMany("Instructors")
                        .HasForeignKey("CategoryBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryB");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.WorkExperience", b =>
                {
                    b.HasOne("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Instructor", "Instructor")
                        .WithMany("WorkExperiencesPerCompany")
                        .HasForeignKey("InstructorId");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Car", b =>
                {
                    b.Navigation("CarsPerCity");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.CategoryB", b =>
                {
                    b.Navigation("CarPerCity");

                    b.Navigation("CategoryLessons");

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Instructor", b =>
                {
                    b.Navigation("WorkExperiencesPerCompany");
                });

            modelBuilder.Entity("DrivingSchoolApp.Services.CategoryServices.BCategoryAPI.DataAccerrss.Entities.Lesson", b =>
                {
                    b.Navigation("CategoryLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
